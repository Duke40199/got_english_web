{"version":3,"sources":["api/rating-algorithm.js","reusable/RatingAlgorithmValidator.js","views/pages/rating-algorithm/RatingAlgorithm.js","api/APIKit.js","reusable/DefineErrorLog.js"],"names":["GetRatingAlgorithmAPI","a","token","JSON","parse","localStorage","getItem","ratingAlgorithm","onSuccess","data","onFailure","error","console","log","apiConfig","headers","APIKit","get","then","catch","UpdateRatingAlgorithmAPI","updateInfoJson","updateResult","response","success","DefineErrorLog","put","RatingAlgorithmValidator","userInput","errors","minimum_rating_count","unparsedMinimumRatingCount","toString","parsedMinimumRatingCount","parseInt","isEmpty","isNumeric","isInt","RatingAlgorithm","useState","averageAllExpertsRating","setAverageAllExpertsRating","updateMinimumRatingCount","setUpdateMinimumRatingCount","fieldErrorMessages","setFieldErrorMessages","updateSubmitModalShow","setUpdateSubmitModalShow","updateMessage","setUpdateMessage","promiseInProgress","usePromiseTracker","useEffect","trackPromise","ratingAlgorithmInfo","average_all_experts_rating","fetchData","onSubmitUpdateForm","e","preventDefault","formValidate","Object","keys","length","updateRatingAlgorithmData","updateRatingAlgorithmResult","color","moderator_details","can_manage_rating_algorithm","onSubmit","method","encType","className","md","htmlFor","xs","type","id","name","value","onChange","target","show","onClose","closeOnBackdrop","closeButton","disabled","onClick","axios","create","baseURL","timeout","errorResponse","definedErrorLog","errorLogMessage","includes"],"mappings":"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","file":"static/js/40.8412e71f.chunk.js","sourcesContent":["import APIKit from './APIKit';\r\nimport DefineErrorLog from '../reusable/DefineErrorLog';\r\n\r\nexport const GetRatingAlgorithmAPI = async () => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let ratingAlgorithm = null;\r\n    const onSuccess = data => {\r\n        ratingAlgorithm = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: { \"Authorization\": `Bearer ${token}` }\r\n    }\r\n\r\n    await APIKit.get('/rating-algorithm', apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return ratingAlgorithm;\r\n}\r\n\r\nexport const UpdateRatingAlgorithmAPI = async (updateInfoJson) => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let updateResult = null;\r\n    const onSuccess = response => {\r\n        updateResult = response.data.success;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        updateResult = DefineErrorLog(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: { \"Authorization\": `Bearer ${token}` }\r\n    }\r\n\r\n    await APIKit.put('/rating-algorithm', updateInfoJson, apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return updateResult;\r\n}","import { isEmpty, isNumeric, isInt } from 'validator';\r\n\r\nconst RatingAlgorithmValidator = (userInput) => {\r\n    const errors = {};\r\n\r\n    //minimum rating count\r\n    if (userInput.minimum_rating_count != null) {\r\n        const unparsedMinimumRatingCount = userInput.minimum_rating_count.toString();\r\n        const parsedMinimumRatingCount = parseInt(userInput.minimum_rating_count);\r\n        if (isEmpty(unparsedMinimumRatingCount)) {\r\n            errors.minimum_rating_count = \"Giá trị (m) là bắt buộc!\"\r\n        } else if (!isNumeric(unparsedMinimumRatingCount) || !isInt(unparsedMinimumRatingCount)) {\r\n            errors.minimum_rating_count = \"Giá trị (m) phải là số nguyên!\"\r\n        } else if (parsedMinimumRatingCount < 1 || parsedMinimumRatingCount > 1000) {\r\n            errors.minimum_rating_count = \"Giá trị (m) chỉ chấp nhận giá trị từ 1 - 1000!\"\r\n        }\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport default RatingAlgorithmValidator","import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CRow,\r\n    CCardHeader,\r\n    CButton,\r\n    CForm,\r\n    CLabel,\r\n    CInput,\r\n    CCardFooter,\r\n    CModal,\r\n    CModalFooter,\r\n    CModalBody,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CAlert,\r\n    CInvalidFeedback\r\n} from '@coreui/react'\r\n\r\nimport { GetRatingAlgorithmAPI, UpdateRatingAlgorithmAPI } from '../../../api/rating-algorithm'\r\n\r\nimport RatingAlgorithmValidator from '../../../reusable/RatingAlgorithmValidator'\r\n\r\nimport { usePromiseTracker, trackPromise } from \"react-promise-tracker\";\r\n\r\nconst RatingAlgorithm = () => {\r\n    const [averageAllExpertsRating, setAverageAllExpertsRating] = useState(\"\");\r\n    const [updateMinimumRatingCount, setUpdateMinimumRatingCount] = useState(\"\");\r\n    const [fieldErrorMessages, setFieldErrorMessages] = useState({});\r\n    const [updateSubmitModalShow, setUpdateSubmitModalShow] = useState(false);\r\n    const [updateMessage, setUpdateMessage] = useState(null);\r\n\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    //this useEffect will be executed every time the modal show\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const ratingAlgorithmInfo = await trackPromise(GetRatingAlgorithmAPI());\r\n            if (ratingAlgorithmInfo != null) {\r\n                setUpdateMinimumRatingCount(ratingAlgorithmInfo.minimum_rating_count);\r\n                setAverageAllExpertsRating(ratingAlgorithmInfo.average_all_experts_rating);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const onSubmitUpdateForm = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const userInput = {\r\n            \"minimum_rating_count\": updateMinimumRatingCount,\r\n        }\r\n\r\n        const formValidate = RatingAlgorithmValidator(userInput);\r\n        const noErrors = Object.keys(formValidate).length === 0;\r\n\r\n        if (noErrors) {\r\n            const updateRatingAlgorithmData = {\r\n                \"minimum_rating_count\": parseInt(updateMinimumRatingCount)\r\n            }\r\n\r\n            const updateRatingAlgorithmResult = await trackPromise(UpdateRatingAlgorithmAPI(updateRatingAlgorithmData));\r\n\r\n            if (updateRatingAlgorithmResult === true) {\r\n                setUpdateMessage(<CAlert color=\"success\">Cập nhật thành công!</CAlert>);\r\n            } else {\r\n                setUpdateMessage(<CAlert color=\"danger\">{updateRatingAlgorithmResult}</CAlert>);\r\n            }\r\n            //clear errors if any\r\n            setUpdateSubmitModalShow(false);\r\n            setFieldErrorMessages({});\r\n        } else {\r\n            setUpdateSubmitModalShow(false);\r\n            setFieldErrorMessages(formValidate);\r\n            setUpdateMessage(null);\r\n        }\r\n    }\r\n\r\n    //check permission\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    const canManageRatingAlgorithm = userInfo.moderator_details.can_manage_rating_algorithm;\r\n    if (canManageRatingAlgorithm) {\r\n        return (\r\n            <CCol>\r\n                {updateMessage}\r\n                <CCard>\r\n                    <CCardHeader>\r\n                        <strong>Công thức:</strong>\r\n                        <p>W = v * 1 / (v + m) * R + m * 1 / (v + m) * C</p>\r\n                        <i>Trong đó:</i><br />\r\n                        <i>W = Đánh giá Chuyên Gia có trọng số</i><br />\r\n                        <i>v = Số lượt được Đánh giá của Chuyên Gia</i><br />\r\n                        <i>R = Trung bình Đánh giá của Chuyên Gia</i><br />\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                        <CForm onSubmit={onSubmitUpdateForm} method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                            <CRow>\r\n                                <CCol md=\"4\">\r\n                                    <CLabel htmlFor=\"update-minimum-rating-count\">Trung bình Đánh Giá của Chuyên Gia trên toàn hệ thống (C):</CLabel>\r\n                                </CCol>\r\n                                <CCol xs=\"12\" md=\"8\">\r\n                                    <p>{averageAllExpertsRating}</p>\r\n                                </CCol>\r\n                            </CRow>\r\n                            <CRow>\r\n                                <CCol md=\"4\">\r\n                                    <CLabel htmlFor=\"update-minimum-rating-count\">Số lượt Đánh Giá nhỏ nhất mà Chuyên Gia cần đạt (m):</CLabel>\r\n                                </CCol>\r\n                                <CCol xs=\"12\" md=\"8\">\r\n                                    <CInput\r\n                                        className=\"w-25\"\r\n                                        type=\"number\"\r\n                                        id=\"update-minimum-rating-count\" name=\"minimum-rating-count\" value={updateMinimumRatingCount} onChange={({ target }) => setUpdateMinimumRatingCount(target.value)} />\r\n                                    {fieldErrorMessages.minimum_rating_count != null ? <CInvalidFeedback\r\n                                        className=\"d-block\"\r\n                                    >\r\n                                        {fieldErrorMessages.minimum_rating_count}\r\n                                    </CInvalidFeedback>\r\n                                        : null}\r\n                                </CCol>\r\n                            </CRow>\r\n                            <CModal\r\n                                show={updateSubmitModalShow}\r\n                                onClose={() => setUpdateSubmitModalShow(false)}\r\n                                closeOnBackdrop={false}\r\n                                color=\"success\"\r\n                            >\r\n                                <CModalHeader closeButton>\r\n                                    <CModalTitle>Xác nhận</CModalTitle>\r\n                                </CModalHeader>\r\n                                <CModalBody>\r\n                                    Thay đổi này sẽ ảnh hưởng lên toàn bộ hệ thống. Bạn có đồng ý không?\r\n                                </CModalBody>\r\n                                <CModalFooter>\r\n                                    <CButton color=\"success\" type=\"submit\" disabled={promiseInProgress}>\r\n                                        Đồng ý\r\n                            </CButton>\r\n                                    <CButton color=\"secondary\" onClick={() => setUpdateSubmitModalShow(false)}>\r\n                                        Đóng\r\n                            </CButton>\r\n                                </CModalFooter>\r\n                            </CModal>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    <CCardFooter>\r\n                        <CButton className=\"mr-2\" color=\"success\" disabled={promiseInProgress} onClick={() => setUpdateSubmitModalShow(true)}>Cập nhật</CButton>\r\n                    </CCardFooter>\r\n                </CCard>\r\n\r\n            </CCol>\r\n        );\r\n    } else {\r\n        return (\r\n            <CAlert color=\"danger\">Bạn không có quyền sử dụng chức năng này!</CAlert>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RatingAlgorithm","// import axios from 'axios';\r\n\r\n// let APIKit = axios.create({\r\n//     baseURL: process.env.BACKEND_URL,\r\n//     timeout: 10000\r\n// })\r\n\r\n// export default APIKit;\r\n\r\nimport axios from 'axios';\r\n\r\n// Create axios client, pre-configured with baseURL\r\nlet APIKit = axios.create({\r\n  baseURL: 'https://got-english-backend-production-swiyh5bc4q-de.a.run.app',\r\n  timeout: 10000,\r\n});\r\n\r\n// Set JSON Web Token in Client to be included in all calls\r\n// export const setClientToken = token => {\r\n//   APIKit.interceptors.request.use(function (config) {\r\n//     config.headers.Authorization = `Bearer ${token}`;\r\n//     return config;\r\n//   });\r\n// };\r\n\r\nexport default APIKit;","const DefineErrorLog = (errorResponse) => {\r\n    let definedErrorLog = \"\";\r\n    if (errorResponse != null) {\r\n        if (errorResponse.response != null) {\r\n            if (errorResponse.response.data != null) {\r\n                const errorLogMessage = errorResponse.response.data;\r\n                if (errorLogMessage.includes(\"Account is already suspended.\")) {\r\n                    definedErrorLog = \"Tài khoản này đã bị khóa!\";\r\n                } else if (errorLogMessage.includes(\"account unavailable\")) {\r\n                    definedErrorLog = \"Email đã được sử dụng!\";\r\n                } else if (errorLogMessage.includes(\"'username'\")) {\r\n                    definedErrorLog = \"Tên tài khoản đã được sử dụng!\";\r\n                } else if (errorLogMessage.includes(\"Account is currently in a messaging session\")) {\r\n                    definedErrorLog = \"Tài khoản này hiện đang sử dụng dịch vụ Phiên nhắn tin! Chưa thể khóa...\";\r\n                } else if (errorLogMessage.includes(\"Account is currently in a live call session\")) {\r\n                    definedErrorLog = \"Tài khoản này hiện đang sử dụng dịch vụ Phiên gọi trực tuyến! Chưa thể khóa...\";\r\n                } else if (errorLogMessage.includes(\"Account is currently in a translation session\")) {\r\n                    definedErrorLog = \"Tài khoản này hiện đang sử dụng dịch vụ Phòng phiên dịch! Chưa thể khóa...\";\r\n                } else if (errorLogMessage.includes(\"Account is not yet suspended.\")) {\r\n                    definedErrorLog = \"Tài khoản này đã được mở khóa!\";\r\n                } else if (errorLogMessage.includes(\"You don't have permission\")) {\r\n                    definedErrorLog = \"Tài khoản của bạn không có quyền để thực hiện thao tác này!\";\r\n                } else {\r\n                    definedErrorLog = \"Đã có lỗi xảy ra!\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return definedErrorLog;\r\n}\r\n\r\nexport default DefineErrorLog"],"sourceRoot":""}