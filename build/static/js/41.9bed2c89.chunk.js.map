{"version":3,"sources":["api/APIKit.js","api/rating.js","views/pages/manage-expert/view-expert-feedback/ViewExpertFeedback.js"],"names":["APIKit","axios","create","baseURL","timeout","GetRatingListByExpertIdAPI","expertId","a","token","JSON","parse","localStorage","getItem","ratingList","onSuccess","data","onFailure","error","console","log","apiConfig","headers","get","then","catch","fields","key","label","ViewExpertFeedback","URLSearchParams","useLocation","search","useState","selectedExpertRatingList","setSelectedExpertRatingList","promiseInProgress","usePromiseTracker","useEffect","trackPromise","expertRatingList","className","items","hover","striped","bordered","size","itemsPerPage","pagination","loading","noItemsView","noResults","noItems","scopedSlots","item","learner","account","username","hasOwnProperty","value","score","activeColor","edit","format","parseISO","updated_at"],"mappings":"6KAAA,aAYIA,EAZJ,OAYaC,EAAMC,OAAO,CACxBC,QAAS,iEACTC,QAAS,MAWIJ,O,0HCvBFK,EAA0B,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChCC,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,SAAUJ,MACrDK,EAAa,KACXC,EAAY,SAAAC,GACdF,EAAaE,EAAKA,KAAKA,MAGrBC,EAAY,SAAAC,GACdC,QAAQC,IAAIF,IAGVG,EAAY,CACdC,QAAS,CACL,cAAgB,UAAhB,OAA2Bb,KAbG,SAiBhCR,IAAOsB,IAAI,sBAAwBhB,EAAUc,GAC9CG,KAAKT,GACLU,MAAMR,GAnB2B,gCAqB/BH,GArB+B,2CAAH,sD,4CCkBjCY,EAAS,CACX,CAAEC,IAAK,mBAAoBC,MAAO,6CAClC,CAAED,IAAK,eAAgBC,MAAO,yCAC9B,CAAED,IAAK,QAASC,MAAO,iDACvB,CAAED,IAAK,UAAWC,MAAO,qCACzB,CAAED,IAAK,aAAcC,MAAO,gDA2FjBC,UAzFY,WACvB,IAIMtB,EAHK,IAAIuB,gBAAgBC,cAAcC,QAGtBT,IAAI,YALE,EAOmCU,mBAAS,MAP5C,mBAOtBC,EAPsB,KAOIC,EAPJ,KASrBC,EAAsBC,8BAAtBD,kBAERE,oBAAS,sBAAC,4BAAA9B,EAAA,sEACyB+B,uBAAajC,EAA2BC,IADjE,OACAiC,EADA,OAENL,EAA4BK,GAC5BrB,QAAQC,IAAIoB,GAHN,2CAIP,CAACjC,IAcJ,OACI,cAAC,KAAD,UACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,oBAAIkC,UAAU,OAAd,wEAEJ,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,MAAOR,EACPR,OAAQA,EACRiB,OAAK,EACLC,SAAO,EACPC,UAAQ,EACRC,KAAK,KACLC,aAAc,GACdC,YAAU,EACVC,QAASb,EACTc,YAAa,CAAEC,UAAW,uEAAwCC,QAAS,oCAC3EC,YACI,CACI,iBACI,SAACC,GAAD,OACI,6BACKA,EAAKC,QAAQC,QAAQC,YAGlC,aACI,SAACH,GAAD,OACI,8BAzCjBd,EA0CqCc,EAzCpDd,EAAiBkB,eAAe,qBACzB,yBACAlB,EAAiBkB,eAAe,uBAChC,8BACAlB,EAAiBkB,eAAe,qBAChC,yCAEA,sDARQ,IAAAlB,GA6CS,MACI,SAACc,GAAD,OACI,6BACI,cAAC,IAAD,CACIK,MAAOL,EAAKM,MACZd,KAAM,GACNe,YAAY,UACZC,MAAM,OAItB,WACI,SAACR,GAAD,OACI,6BACKS,YAAOC,YAASV,EAAKW,YAAa","file":"static/js/41.9bed2c89.chunk.js","sourcesContent":["// import axios from 'axios';\r\n\r\n// let APIKit = axios.create({\r\n//     baseURL: process.env.BACKEND_URL,\r\n//     timeout: 10000\r\n// })\r\n\r\n// export default APIKit;\r\n\r\nimport axios from 'axios';\r\n\r\n// Create axios client, pre-configured with baseURL\r\nlet APIKit = axios.create({\r\n  baseURL: 'https://got-english-backend-production-swiyh5bc4q-de.a.run.app',\r\n  timeout: 10000,\r\n});\r\n\r\n// Set JSON Web Token in Client to be included in all calls\r\n// export const setClientToken = token => {\r\n//   APIKit.interceptors.request.use(function (config) {\r\n//     config.headers.Authorization = `Bearer ${token}`;\r\n//     return config;\r\n//   });\r\n// };\r\n\r\nexport default APIKit;","import APIKit from './APIKit';\r\n\r\nexport const GetRatingListByExpertIdAPI = async (expertId) => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let ratingList = null;\r\n    const onSuccess = data => {\r\n        ratingList = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: {\r\n            \"Authorization\": `Bearer ${token}`\r\n        }\r\n    }\r\n\r\n    await APIKit.get('/ratings?expert_id=' + expertId, apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return ratingList;\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useLocation } from \"react-router-dom\"\r\n\r\nimport ReactStars from 'react-rating-stars-component'\r\n\r\nimport { GetRatingListByExpertIdAPI } from '../../../../api/rating'\r\n\r\nimport { format, parseISO } from 'date-fns'\r\n\r\nimport { usePromiseTracker, trackPromise } from \"react-promise-tracker\";\r\n\r\nimport {\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CDataTable,\r\n    CRow,\r\n} from '@coreui/react'\r\n\r\nconst fields = [\r\n    { key: 'learner_username', label: 'Tên tài khoản Học Viên' },\r\n    { key: 'used_service', label: 'Dịch vụ Đánh Giá' },\r\n    { key: 'score', label: 'Đánh Giá của Học Viên' },\r\n    { key: 'comment', label: 'Nội dung Đánh Giá' },\r\n    { key: 'updated_at', label: 'Thời Gian gửi Đánh Giá' }]\r\n\r\nconst ViewExpertFeedback = () => {\r\n    const useQuery = () => {\r\n        return new URLSearchParams(useLocation().search);\r\n    }\r\n    const query = useQuery();\r\n    const expertId = query.get(\"expertId\");\r\n\r\n    const [selectedExpertRatingList, setSelectedExpertRatingList] = useState(null);\r\n\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    useEffect(async () => {\r\n        const expertRatingList = await trackPromise(GetRatingListByExpertIdAPI(expertId));\r\n        setSelectedExpertRatingList(expertRatingList);\r\n        console.log(expertRatingList);\r\n    }, [expertId])\r\n\r\n    const GetUsedService = expertRatingList => {\r\n        if (expertRatingList.hasOwnProperty(\"messaging_session\")) {\r\n            return 'Phiên nhắn tin';\r\n        } else if (expertRatingList.hasOwnProperty(\"translation_session\")) {\r\n            return 'Phòng phiên dịch';\r\n        } else if (expertRatingList.hasOwnProperty(\"live_call_session\")) {\r\n            return 'Phiên gọi trực tuyến';\r\n        } else {\r\n            return 'Dịch vụ Không xác định';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                        <h3 className=\"mb-0\">Chi tiết Đánh Giá của Chuyên Gia</h3>\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                        <CDataTable\r\n                            items={selectedExpertRatingList}\r\n                            fields={fields}\r\n                            hover\r\n                            striped\r\n                            bordered\r\n                            size=\"sm\"\r\n                            itemsPerPage={10}\r\n                            pagination\r\n                            loading={promiseInProgress}\r\n                            noItemsView={{ noResults: 'Không có kết quả tìm kiếm trùng khớp', noItems: 'Không có dữ liệu' }}\r\n                            scopedSlots={\r\n                                {\r\n                                    'learner_username':\r\n                                        (item) => (\r\n                                            <td>\r\n                                                {item.learner.account.username}\r\n                                            </td>\r\n                                        ),\r\n                                    'used_service':\r\n                                        (item) => (\r\n                                            <td>\r\n                                                {GetUsedService(item)}\r\n                                            </td>\r\n                                        ),\r\n                                    'score':\r\n                                        (item) => (\r\n                                            <td>\r\n                                                <ReactStars\r\n                                                    value={item.score}\r\n                                                    size={24}\r\n                                                    activeColor=\"#FFD700\"\r\n                                                    edit={false}\r\n                                                />\r\n                                            </td>\r\n                                        ),\r\n                                    'updated_at':\r\n                                        (item) => (\r\n                                            <td>\r\n                                                {format(parseISO(item.updated_at), 'dd-MM-yyyy HH:mm:ss')}\r\n                                            </td>\r\n                                        ),\r\n                                }\r\n                            }\r\n                        />\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CCol>\r\n        </CRow>\r\n    )\r\n}\r\n\r\nexport default ViewExpertFeedback"],"sourceRoot":""}