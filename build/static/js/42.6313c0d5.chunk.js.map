{"version":3,"sources":["api/application-form.js","views/pages/view-application-form/ApproveAppicationFormModal.js","views/pages/view-application-form/RejectApplicationFormModal.js","views/pages/view-application-form/ViewApplicationForm.js","api/APIKit.js"],"names":["GetApplicationFormListAPI","a","token","JSON","parse","localStorage","getItem","applicationFormList","onSuccess","data","onFailure","error","console","log","apiConfig","headers","APIKit","get","then","catch","ApproveApplicationFormByIdAPI","applicationFormId","approveApplicationFormResult","response","success","includes","put","RejectApplicationFormByIdAPI","rejectApplicationFormResult","ApproveApplicationFormModal","selectedApplicationFormId","show","handleClose","refreshDataFlag","setRefreshDataFlag","useState","approveMessage","setApproveMessage","promiseInProgress","usePromiseTracker","onSubmitApproveForm","e","preventDefault","trackPromise","approveResult","color","onClose","closeOnBackdrop","onSubmit","method","encType","className","closeButton","type","disabled","onClick","RejectApplicationFormModal","rejectMessage","setRejectMessage","onSubmitRejectForm","rejectResult","getBadge","status","defineStatus","fields","key","label","_style","width","ViewCandidateCertification","currentIndex","setCurrentIndex","approveApplicationFormModalShow","setApproveApplicationFormModalShow","rejectApplicationFormModalShow","setRejectApplicationFormModalShow","setSelectedApplicationFormId","setApplicationFormList","defineApplicationFormType","applicationType","definedApplicationFormType","beforeDefineApplicationType","split","map","item","index","push","useEffect","editedApplicationFormList","editedApplicationForm","expert_info","account","fullname","email","phone_number","id","photo_url","created_at","hideApproveApplicationFormModal","hideRejectApplicationFormModal","moderator_details","can_manage_application_form","addTableClasses","items","striped","bordered","size","itemsPerPage","pagination","loading","noItemsView","noResults","noItems","tableFilter","placeholder","scopedSlots","application_type","src","application_form_certificate","height","openLightbox","image","showTitle","application_form_status","application_form_send_datetime","format","parseISO","data-toggle","title","name","application_id","axios","create","baseURL","timeout"],"mappings":"wQAEaA,EAAyB,uCAAG,oCAAAC,EAAA,6DAC/BC,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,SAAUJ,MACrDK,EAAsB,KAEpBC,EAAY,SAAAC,GACdF,EAAsBE,EAAKA,KAAKA,MAG9BC,EAAY,SAAAC,GACdC,QAAQC,IAAIF,IAGVG,EAAY,CACdC,QAAS,CACL,cAAgB,UAAhB,OAA2Bb,KAdE,SAkB/Bc,IAAOC,IAAI,qBAAsBH,GAClCI,KAAKV,GACLW,MAAMT,GApB0B,gCAsB9BH,GAtB8B,2CAAH,qDAoGzBa,EAA6B,uCAAG,WAAOC,GAAP,uBAAApB,EAAA,6DACnCC,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,SAAUJ,MACrDoB,EAA+B,KAE7Bd,EAAY,SAAAe,GACdD,EAA+BC,EAASd,KAAKe,SAG3Cd,EAAY,SAAAC,GACdC,QAAQC,IAAIF,GAERW,EADCX,EAAMY,SAASd,KAAMgB,SAAS,kEACA,qHAEA,oDAIjCX,EAAY,CACdC,QAAS,CAAE,cAAgB,UAAhB,OAA2Bb,KAlBD,SAqBnCc,IAAOU,IAAI,sBAAwBL,EAAoB,WAAY,GAAIP,GACxEI,KAAKV,GACLW,MAAMT,GAvB8B,gCAyBlCY,GAzBkC,2CAAH,sDA4B7BK,EAA4B,uCAAG,WAAON,GAAP,uBAAApB,EAAA,6DAClCC,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,SAAUJ,MACrD0B,EAA8B,KAE5BpB,EAAY,SAAAe,GACdK,EAA8BL,EAASd,KAAKe,SAG1Cd,EAAY,SAAAC,GACdC,QAAQC,IAAIF,GAERiB,EADCjB,EAAMY,SAASd,KAAMgB,SAAS,kEACD,qHAEA,oDAIhCX,EAAY,CACdC,QAAS,CAAE,cAAgB,UAAhB,OAA2Bb,KAlBF,SAqBlCc,IAAOU,IAAI,sBAAwBL,EAAoB,UAAW,GAAIP,GACvEI,KAAKV,GACLW,MAAMT,GAvB6B,gCAyBjCkB,GAzBiC,2CAAH,sD,QCrE1BC,EA5CqB,SAAC,GAA2F,IAAzFC,EAAwF,EAAxFA,0BAA2BC,EAA6D,EAA7DA,KAAMC,EAAuD,EAAvDA,YAAaC,EAA0C,EAA1CA,gBAAiBC,EAAyB,EAAzBA,mBAAyB,EAC/EC,mBAAS,MADsE,mBACpHC,EADoH,KACpGC,EADoG,KAGnHC,EAAsBC,8BAAtBD,kBAEFE,EAAmB,uCAAG,WAAOC,GAAP,eAAAxC,EAAA,6DACxBwC,EAAEC,iBADsB,SAGIC,uBAAavB,EAA8BU,IAH/C,QAIF,KADhBc,EAHkB,SAKpBP,EAAkB,cAAC,IAAD,CAAQQ,MAAM,UAAd,6DAClBX,GAAoBD,IAEpBI,EAAkB,cAAC,IAAD,CAAQQ,MAAM,SAAd,SAAwBD,KARtB,2CAAH,sDAYzB,OACI,cAAC,KAAD,CACIb,KAAMA,EACNe,QAASd,IACTe,iBAAiB,EACjBF,MAAM,UAJV,SAMI,eAAC,IAAD,CAAOG,SAAUR,EAAqBS,OAAO,OAAOC,QAAQ,sBAAsBC,UAAU,kBAA5F,UACI,cAAC,KAAD,CAAcC,aAAW,EAAzB,SACI,eAAC,KAAD,iDAAkCtB,EAAlC,UAEJ,cAAC,KAAD,UACKM,GAAkC,yFAEvC,eAAC,KAAD,WACI,cAAC,IAAD,CAASS,MAAM,UAAUQ,KAAK,SAASC,SAAUhB,EAAjD,wBAGA,cAAC,IAAD,CAASO,MAAM,YAAYU,QAASvB,IAApC,mCCSLwB,EA5CoB,SAAC,GAA2F,IAAzF1B,EAAwF,EAAxFA,0BAA2BC,EAA6D,EAA7DA,KAAMC,EAAuD,EAAvDA,YAAaC,EAA0C,EAA1CA,gBAAiBC,EAAyB,EAAzBA,mBAAyB,EAChFC,mBAAS,MADuE,mBACnHsB,EADmH,KACpGC,EADoG,KAGlHpB,EAAsBC,8BAAtBD,kBAEFqB,EAAkB,uCAAG,WAAOlB,GAAP,eAAAxC,EAAA,6DACvBwC,EAAEC,iBADqB,SAGIC,uBAAahB,EAA6BG,IAH9C,QAIF,KADf8B,EAHiB,SAKnBF,EAAiB,cAAC,IAAD,CAAQb,MAAM,UAAd,oEACjBX,GAAoBD,IAEpByB,EAAiB,cAAC,IAAD,CAAQb,MAAM,SAAd,SAAwBe,KARtB,2CAAH,sDAYxB,OACI,cAAC,KAAD,CACI7B,KAAMA,EACNe,QAASd,IACTe,iBAAiB,EACjBF,MAAM,SAJV,SAMI,eAAC,IAAD,CAAOG,SAAUW,EAAoBV,OAAO,OAAOC,QAAQ,sBAAsBC,UAAU,kBAA3F,UACI,cAAC,KAAD,CAAcC,aAAW,EAAzB,SACI,eAAC,KAAD,wDAAoCtB,EAApC,UAEJ,cAAC,KAAD,UACK2B,GAAgC,gGAErC,eAAC,KAAD,WACI,cAAC,IAAD,CAASZ,MAAM,SAASQ,KAAK,SAASC,SAAUhB,EAAhD,+BAGA,cAAC,IAAD,CAASO,MAAM,YAAYU,QAASvB,IAApC,mC,gDC5Bd6B,EAAW,SAAAC,GACb,OAAQA,GACJ,IAAK,WAAY,MAAO,UACxB,IAAK,WAAY,MAAO,SACxB,IAAK,UAAW,MAAO,UACvB,QAAS,MAAO,SAIlBC,EAAe,SAAAD,GACjB,OAAQA,GACJ,IAAK,WAAY,MAAO,wBACxB,IAAK,WAAY,MAAO,+BACxB,IAAK,UAAW,MAAO,qBACvB,QAAS,MAAO,mCAIlBE,EAAS,CACX,CAAEC,IAAK,kBAAmBC,MAAO,uBAAaC,OAAQ,CAAEC,MAAO,QAC/D,CAAEH,IAAK,eAAgBC,MAAO,QAASC,OAAQ,CAAEC,MAAO,QACxD,CAAEH,IAAK,eAAgBC,MAAO,oCAAiBC,OAAQ,CAAEC,MAAO,QAChE,CAAEH,IAAK,mBAAoBC,MAAO,0BAAYC,OAAQ,CAAEC,MAAO,QAC/D,CAAEH,IAAK,+BAAgCC,MAAO,sBAAaC,OAAQ,CAAEC,MAAO,QAC5E,CAAEH,IAAK,0BAA2BC,MAAO,qBAAcC,OAAQ,CAAEC,MAAO,OACxE,CAAEH,IAAK,iCAAkCC,MAAO,wCAAqBC,OAAQ,CAAEC,MAAO,QACtF,CAAEH,IAAK,SAAUC,MAAO,GAAIC,OAAQ,CAAEC,MAAO,QAwMlCC,UAtMoB,WAAO,IAAD,EACGlC,oBAAU,GADb,mBAC9BmC,EAD8B,KAChBC,EADgB,OAEyCpC,oBAAS,GAFlD,mBAE9BqC,EAF8B,KAEGC,EAFH,OAGuCtC,oBAAS,GAHhD,mBAG9BuC,EAH8B,KAGEC,EAHF,OAI6BxC,mBAAS,MAJtC,mBAI9BL,EAJ8B,KAIH8C,EAJG,OAKiBzC,mBAAS,MAL1B,mBAK9B5B,EAL8B,KAKTsE,EALS,OAMS1C,oBAAS,GANlB,mBAM9BF,EAN8B,KAMbC,EANa,KAQ7BI,EAAsBC,8BAAtBD,kBAEFwC,EAA4B,SAACC,GAC/B,IAAIC,EAA6B,GAC7BC,EAA8BF,EAAgBG,MAAM,KAcxD,OAbmC,MAA/BD,GAAsE,IAA/BA,GACvCA,EAA4BE,KAAI,SAACC,EAAMC,GACtB,aAATD,GACAJ,EAA2BM,KAAK,0CAEvB,+BAATF,GACAJ,EAA2BM,KAAK,0DAEvB,iCAATF,GACAJ,EAA2BM,KAAK,kDAIrCN,GAGXO,oBAAS,sBAAC,gCAAAtF,EAAA,sEAC4B0C,uBAAa3C,KADzC,OACAO,EADA,OAEAiF,EAA4B,GAC9BC,EAAwB,GACD,MAAvBlF,GACAA,EAAoB4E,KAAI,SAACC,GACrBK,EAAwB,CACpB,gBAAyD,MAArCL,EAAKM,YAAYC,QAAQC,UAAyD,IAArCR,EAAKM,YAAYC,QAAQC,SAAkB,GAAKR,EAAKM,YAAYC,QAAQC,SAC1I,aAAgBR,EAAKM,YAAYC,QAAQE,MACzC,aAAyD,MAAzCT,EAAKM,YAAYC,QAAQG,cAAiE,IAAzCV,EAAKM,YAAYC,QAAQG,aAAqB,GAAKV,EAAKM,YAAYC,QAAQG,aAC7I,eAAkBV,EAAKW,GACvB,iBAAoBX,EAAK/B,KACzB,6BAAgC+B,EAAKY,UACrC,wBAA2BZ,EAAKtB,OAChC,+BAAkCsB,EAAKa,YAE3CT,EAA0BF,KAAKG,MAGvCZ,EAAuBW,GAnBjB,2CAoBP,CAACvD,IAEJ,IAcMiE,EAAkC,WACpCzB,GAAmC,IAGjC0B,EAAiC,WACnCxB,GAAkC,IAUtC,GAFiBxE,KAAKC,MAAMC,aAAaC,QAAQ,aACP8F,kBAAkBC,4BAExD,OACI,eAAC,KAAD,WACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,oBAAIlD,UAAU,MAAd,6DAEJ,cAAC,IAAD,CAAWA,UAAU,YAArB,SACI,cAAC,IAAD,CACImD,gBAAgB,aAChBC,MAAOhG,EACPyD,OAAQA,EACRwC,SAAO,EACPC,UAAQ,EACRC,KAAK,KACLC,aAAc,EACdC,YAAU,EACVC,QAASvE,EACTwE,YAAa,CAAEC,UAAW,uEAAwCC,QAAS,oCAC3EC,YACI,CACI/C,MAAO,oBACPgD,YAAa,8EAGrBC,YACI,CACI,iBACI,SAAC/B,EAAMC,GAAP,OACI,oBAAIlC,UAAU,gBAAd,SAC+B,MAAzBiC,EAAKgC,kBAAqD,IAAzBhC,EAAKgC,iBACpC,GACAtC,EAA0BM,EAAKgC,qBAI/C,6BACI,SAAChC,EAAMC,GAAP,OACI,+BACI,qBAAKgC,IAAKjC,EAAKkC,6BAA8BnE,UAAU,uCAAuCiB,MAAM,QAAQmD,OAAO,OAAOhE,QAAS,SAAAd,GAAC,OA/C/J,SAAC4C,GAClBd,EAAgBc,GA8CoKmC,CAAanC,MACpJf,GAAgBe,EAEb,cAAC,IAAD,CAAUoC,MAAOrC,EAAKkC,6BAClBI,WAAW,EACX5E,QAAS,SAAAL,GAAC,OAAI8B,GAAiB,MACjC,SAGlB,wBACI,SAACa,GAAD,OACI,6BACI,cAAC,IAAD,CAAQvC,MAAOgB,EAASuB,EAAKuC,yBAA7B,SACK5D,EAAaqB,EAAKuC,8BAInC,+BACI,SAACvC,EAAMC,GAAP,OACI,6BAEgD,MAAvCD,EAAKwC,gCAAiF,IAAvCxC,EAAKwC,+BACjD,GAEAC,YAAOC,YAAS1C,EAAKwC,gCAAiC,0BAI1E,OACI,SAACxC,EAAMC,GAAP,OAEI,oBAAIlC,UAAU,OAAd,SACsC,WAAhCiC,EAAKuC,wBACH,gCACI,wBAAQtE,KAAK,SAASF,UAAU,2BAA2B4E,cAAY,UAAUC,MAAM,aAAvF,SACI,cAAC,IAAD,CAAOC,KAAK,YAAY1E,QAAS,kBAxGtDlC,EAwG0F+D,EAAK8C,eAtGlIzD,GAAmC,QAEnCG,EAA6BvD,GAJK,IAACA,OA2GiB,wBAAQgC,KAAK,SAASF,UAAU,2BAA2B4E,cAAY,UAAUC,MAAM,sBAAvF,SACI,cAAC,IAAD,CAAOC,KAAK,QAAQ1E,QAAS,kBArGnDlC,EAqGsF+D,EAAK8C,eAnG7HvD,GAAkC,QAElCC,EAA6BvD,GAJI,IAACA,UA0Gc,kBAUvCmD,GAAgE,MAA7B1C,EAChC,cAAC,EAAD,CACIA,0BAA2BA,EAC3BC,KAAMyC,EACNxC,YAAa,kBAAMkE,GACnBjE,gBAAiBA,EACjBC,mBAAoBA,IACtB,KAELwC,GAA+D,MAA7B5C,EAC/B,cAAC,EAAD,CACIA,0BAA2BA,EAC3BC,KAAM2C,EACN1C,YAAa,kBAAMmE,GACnBlE,gBAAiBA,EACjBC,mBAAoBA,IACtB,QAIb,M,iCCtPT,aAYIlB,EAZJ,OAYamH,EAAMC,OAAO,CACxBC,QAAS,iEACTC,QAAS,MAWItH","file":"static/js/42.6313c0d5.chunk.js","sourcesContent":["import APIKit from './APIKit'\r\n\r\nexport const GetApplicationFormListAPI = async () => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let applicationFormList = null;\r\n\r\n    const onSuccess = data => {\r\n        applicationFormList = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: {\r\n            \"Authorization\": `Bearer ${token}`\r\n        }\r\n    }\r\n\r\n    await APIKit.get('/application-forms', apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return applicationFormList;\r\n}\r\n\r\nexport const GetPendingApplicationFormListAPI = async () => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let applicationFormList = null;\r\n\r\n    const onSuccess = data => {\r\n        applicationFormList = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: {\r\n            \"Authorization\": `Bearer ${token}`\r\n        }\r\n    }\r\n\r\n    await APIKit.get('/application-forms?status=Pending', apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return applicationFormList;\r\n}\r\n\r\nexport const GetApprovedApplicationFormListAPI = async () => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let applicationFormList = null;\r\n\r\n    const onSuccess = data => {\r\n        applicationFormList = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: {\r\n            \"Authorization\": `Bearer ${token}`\r\n        }\r\n    }\r\n\r\n    await APIKit.get('/application-forms?status=Approved', apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return applicationFormList;\r\n}\r\n\r\nexport const GetRejectedApplicationFormListAPI = async () => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let applicationFormList = null;\r\n\r\n    const onSuccess = data => {\r\n        applicationFormList = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: {\r\n            \"Authorization\": `Bearer ${token}`\r\n        }\r\n    }\r\n\r\n    await APIKit.get('/application-forms?status=Rejected', apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return applicationFormList;\r\n}\r\n\r\nexport const ApproveApplicationFormByIdAPI = async (applicationFormId) => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let approveApplicationFormResult = null;\r\n\r\n    const onSuccess = response => {\r\n        approveApplicationFormResult = response.data.success;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n        if ((error.response.data).includes(\"Application form is already being either approved or rejected.\")) {\r\n            approveApplicationFormResult = \"Đơn xin này đã được duyệt hoặc đã bị từ chối!\"\r\n        } else {\r\n            approveApplicationFormResult = \"Duyệt đơn xin thất bại!\"\r\n        }\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: { \"Authorization\": `Bearer ${token}` }\r\n    }\r\n\r\n    await APIKit.put('/application-forms/' + applicationFormId + '/approve', [], apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return approveApplicationFormResult;\r\n}\r\n\r\nexport const RejectApplicationFormByIdAPI = async (applicationFormId) => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let rejectApplicationFormResult = null;\r\n\r\n    const onSuccess = response => {\r\n        rejectApplicationFormResult = response.data.success;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n        if ((error.response.data).includes(\"Application form is already being either approved or rejected.\")) {\r\n            rejectApplicationFormResult = \"Đơn xin này đã được duyệt hoặc đã bị từ chối!\"\r\n        } else {\r\n            rejectApplicationFormResult = \"Duyệt đơn xin thất bại!\"\r\n        }\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: { \"Authorization\": `Bearer ${token}` }\r\n    }\r\n\r\n    await APIKit.put('/application-forms/' + applicationFormId + '/reject', [], apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return rejectApplicationFormResult;\r\n}","import React, { useState } from 'react'\r\n\r\nimport {\r\n    CButton,\r\n    CModal,\r\n    CModalHeader,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalTitle,\r\n    CAlert,\r\n    CForm\r\n} from '@coreui/react'\r\n\r\nimport { trackPromise, usePromiseTracker } from 'react-promise-tracker';\r\n\r\nimport { ApproveApplicationFormByIdAPI } from '../../../api/application-form'\r\n\r\nconst ApproveApplicationFormModal = ({ selectedApplicationFormId, show, handleClose, refreshDataFlag, setRefreshDataFlag }) => {\r\n    const [approveMessage, setApproveMessage] = useState(null);\r\n\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    const onSubmitApproveForm = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const approveResult = await trackPromise(ApproveApplicationFormByIdAPI(selectedApplicationFormId));\r\n        if (approveResult === true) {\r\n            setApproveMessage(<CAlert color=\"success\">Duyệt đơn xin thành công!</CAlert>);\r\n            setRefreshDataFlag(!refreshDataFlag);\r\n        } else {\r\n            setApproveMessage(<CAlert color=\"danger\">{approveResult}</CAlert>);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CModal\r\n            show={show}\r\n            onClose={handleClose()}\r\n            closeOnBackdrop={false}\r\n            color=\"success\"\r\n        >\r\n            <CForm onSubmit={onSubmitApproveForm} method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>Duyệt đơn xin ( id: {selectedApplicationFormId} )</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {approveMessage ? approveMessage : \"Bạn chắc chắn muốn duyệt đơn xin này chứ?\"}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"success\" type=\"submit\" disabled={promiseInProgress}>\r\n                        Duyệt\r\n                </CButton>\r\n                    <CButton color=\"secondary\" onClick={handleClose()}>\r\n                        Đóng\r\n                </CButton>\r\n                </CModalFooter>\r\n            </CForm>\r\n        </CModal>\r\n    )\r\n}\r\n\r\nexport default ApproveApplicationFormModal","import React, { useState } from 'react'\r\n\r\nimport {\r\n    CButton,\r\n    CModal,\r\n    CModalHeader,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalTitle,\r\n    CAlert,\r\n    CForm\r\n} from '@coreui/react'\r\n\r\nimport { trackPromise, usePromiseTracker } from 'react-promise-tracker';\r\n\r\nimport { RejectApplicationFormByIdAPI } from '../../../api/application-form'\r\n\r\nconst RejectApplicationFormModal = ({ selectedApplicationFormId, show, handleClose, refreshDataFlag, setRefreshDataFlag }) => {\r\n    const [rejectMessage, setRejectMessage] = useState(null);\r\n\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    const onSubmitRejectForm = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const rejectResult = await trackPromise(RejectApplicationFormByIdAPI(selectedApplicationFormId));\r\n        if (rejectResult === true) {\r\n            setRejectMessage(<CAlert color=\"success\">Từ chối đơn xin thành công!</CAlert>);\r\n            setRefreshDataFlag(!refreshDataFlag);\r\n        } else {\r\n            setRejectMessage(<CAlert color=\"danger\">{rejectResult}</CAlert>);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CModal\r\n            show={show}\r\n            onClose={handleClose()}\r\n            closeOnBackdrop={false}\r\n            color=\"danger\"\r\n        >\r\n            <CForm onSubmit={onSubmitRejectForm} method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>Từ chối đơn xin ( id: {selectedApplicationFormId} )</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {rejectMessage ? rejectMessage : \"Bạn chắc chắn muốn từ chối đơn xin này chứ?\"}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"danger\" type=\"submit\" disabled={promiseInProgress}>\r\n                        Từ chối\r\n                </CButton>\r\n                    <CButton color=\"secondary\" onClick={handleClose()}>\r\n                        Đóng\r\n                </CButton>\r\n                </CModalFooter>\r\n            </CForm>\r\n        </CModal>\r\n    );\r\n}\r\n\r\nexport default RejectApplicationFormModal","import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CDataTable,\r\n    CRow,\r\n    CCardHeader,\r\n    CBadge,\r\n    CAlert\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport ApproveApplicationFormModal from '../view-application-form/ApproveAppicationFormModal';\r\nimport RejectApplicationFormModal from '../view-application-form/RejectApplicationFormModal';\r\n\r\nimport Lightbox from \"react-awesome-lightbox\";\r\nimport \"react-awesome-lightbox/build/style.css\";\r\nimport { trackPromise, usePromiseTracker } from 'react-promise-tracker';\r\n\r\nimport { format, parseISO } from 'date-fns';\r\n\r\nimport { GetApplicationFormListAPI } from '../../../api/application-form';\r\n\r\nconst getBadge = status => {\r\n    switch (status) {\r\n        case \"Approved\": return 'success'\r\n        case \"Rejected\": return 'danger'\r\n        case \"Pending\": return 'warning'\r\n        default: return 'dark'\r\n    }\r\n}\r\n\r\nconst defineStatus = status => {\r\n    switch (status) {\r\n        case \"Approved\": return 'Đã duyệt'\r\n        case \"Rejected\": return 'Đã từ chối'\r\n        case \"Pending\": return 'Đang chờ'\r\n        default: return 'Không xác định'\r\n    }\r\n}\r\n\r\nconst fields = [\r\n    { key: 'expert_fullname', label: 'Họ và Tên', _style: { width: '14%' } },\r\n    { key: 'expert_email', label: 'Email', _style: { width: '14%' } },\r\n    { key: 'expert_phone', label: 'Số điện thoại', _style: { width: '10%' } },\r\n    { key: 'application_type', label: 'Loại đơn', _style: { width: '20%' } },\r\n    { key: 'application_form_certificate', label: 'Chứng chỉ', _style: { width: '14%' } },\r\n    { key: 'application_form_status', label: 'Trạng thái', _style: { width: '8%' } },\r\n    { key: 'application_form_send_datetime', label: 'Thời gian nộp đơn', _style: { width: '14%' } },\r\n    { key: 'action', label: '', _style: { width: '6%' } }]\r\n\r\nconst ViewCandidateCertification = () => {\r\n    const [currentIndex, setCurrentIndex] = useState(-1);\r\n    const [approveApplicationFormModalShow, setApproveApplicationFormModalShow] = useState(false);\r\n    const [rejectApplicationFormModalShow, setRejectApplicationFormModalShow] = useState(false);\r\n    const [selectedApplicationFormId, setSelectedApplicationFormId] = useState(null);\r\n    const [applicationFormList, setApplicationFormList] = useState(null);\r\n    const [refreshDataFlag, setRefreshDataFlag] = useState(false);\r\n\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    const defineApplicationFormType = (applicationType) => {\r\n        let definedApplicationFormType = [];\r\n        let beforeDefineApplicationType = applicationType.split(\",\");\r\n        if (beforeDefineApplicationType != null && beforeDefineApplicationType != \"\") {\r\n            beforeDefineApplicationType.map((item, index) => {\r\n                if (item === \"can_chat\") {\r\n                    definedApplicationFormType.push(\"Xin nhận Phiên Nhắn Tin\\n\");\r\n                }\r\n                if (item === \"can_join_live_call_session\") {\r\n                    definedApplicationFormType.push(\"Xin nhận Phiên Gọi Trực Tuyến\\n\");\r\n                }\r\n                if (item === \"can_join_translation_session\") {\r\n                    definedApplicationFormType.push(\"Xin nhận Phòng Phiên Dịch\\n\");\r\n                }\r\n            })\r\n        }\r\n        return definedApplicationFormType;\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const applicationFormList = await trackPromise(GetApplicationFormListAPI());\r\n        const editedApplicationFormList = [];\r\n        let editedApplicationForm = {};\r\n        if (applicationFormList != null) {\r\n            applicationFormList.map((item) => {\r\n                editedApplicationForm = {\r\n                    \"expert_fullname\": (item.expert_info.account.fullname == null || item.expert_info.account.fullname == \"\") ? \"\" : item.expert_info.account.fullname,\r\n                    \"expert_email\": item.expert_info.account.email,\r\n                    \"expert_phone\": item.expert_info.account.phone_number == null || item.expert_info.account.phone_number == \"\" ? \"\" : item.expert_info.account.phone_number,\r\n                    \"application_id\": item.id,\r\n                    \"application_type\": item.type,\r\n                    \"application_form_certificate\": item.photo_url,\r\n                    \"application_form_status\": item.status,\r\n                    \"application_form_send_datetime\": item.created_at\r\n                }\r\n                editedApplicationFormList.push(editedApplicationForm);\r\n            });\r\n        }\r\n        setApplicationFormList(editedApplicationFormList);\r\n    }, [refreshDataFlag]);\r\n\r\n    const approveApplicationFormOnclick = (applicationFormId) => {\r\n        //open the approve application form modal\r\n        setApproveApplicationFormModalShow(true);\r\n        //set params\r\n        setSelectedApplicationFormId(applicationFormId);\r\n    }\r\n\r\n    const rejectApplicationFormOnclick = (applicationFormId) => {\r\n        //open the reject application form modal\r\n        setRejectApplicationFormModalShow(true);\r\n        //set params\r\n        setSelectedApplicationFormId(applicationFormId);\r\n    }\r\n\r\n    const hideApproveApplicationFormModal = () => {\r\n        setApproveApplicationFormModalShow(false);\r\n    }\r\n\r\n    const hideRejectApplicationFormModal = () => {\r\n        setRejectApplicationFormModalShow(false);\r\n    }\r\n\r\n    const openLightbox = (index) => {\r\n        setCurrentIndex(index);\r\n    }\r\n\r\n    //check permission\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    const canManageApplicationForm = userInfo.moderator_details.can_manage_application_form;\r\n    if (canManageApplicationForm) {\r\n        return (\r\n            <CRow>\r\n                <CCol>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            <h3 className=\"m-0\">Danh sách Hồ Sơ Ứng Viên</h3>\r\n                        </CCardHeader>\r\n                        <CCardBody className=\"pt-0 pb-0\">\r\n                            <CDataTable\r\n                                addTableClasses=\"text-break\"\r\n                                items={applicationFormList}\r\n                                fields={fields}\r\n                                striped\r\n                                bordered\r\n                                size=\"sm\"\r\n                                itemsPerPage={5}\r\n                                pagination\r\n                                loading={promiseInProgress}\r\n                                noItemsView={{ noResults: 'Không có kết quả tìm kiếm trùng khớp', noItems: 'Không có dữ liệu' }}\r\n                                tableFilter={\r\n                                    {\r\n                                        label: \"Tìm kiếm:\",\r\n                                        placeholder: \"nhập thông tin Hồ Sơ Ứng Viên cần tìm...\",\r\n                                    }\r\n                                }\r\n                                scopedSlots={\r\n                                    {\r\n                                        'application_type':\r\n                                            (item, index) => (\r\n                                                <td className=\"text-pre-line\">\r\n                                                    {(item.application_type == null || item.application_type == \"\") ?\r\n                                                        \"\" :\r\n                                                        defineApplicationFormType(item.application_type)\r\n                                                    }\r\n                                                </td>\r\n                                            ),\r\n                                        'application_form_certificate':\r\n                                            (item, index) => (\r\n                                                <td>\r\n                                                    <img src={item.application_form_certificate} className=\"img-thumbnail lightbox-thumbnail-img\" width=\"120px\" height=\"90px\" onClick={e => openLightbox(index)} />\r\n                                                    {currentIndex == index\r\n                                                        ?\r\n                                                        <Lightbox image={item.application_form_certificate}\r\n                                                            showTitle={false}\r\n                                                            onClose={e => setCurrentIndex(-1)} />\r\n                                                        : null}\r\n                                                </td>\r\n                                            ),\r\n                                        'application_form_status':\r\n                                            (item) => (\r\n                                                <td>\r\n                                                    <CBadge color={getBadge(item.application_form_status)}>\r\n                                                        {defineStatus(item.application_form_status)}\r\n                                                    </CBadge>\r\n                                                </td>\r\n                                            ),\r\n                                        'application_form_send_datetime':\r\n                                            (item, index) => (\r\n                                                <td>\r\n                                                    {\r\n                                                        (item.application_form_send_datetime == null || item.application_form_send_datetime == \"\") ?\r\n                                                            \"\"\r\n                                                            :\r\n                                                            format(parseISO(item.application_form_send_datetime), 'dd-MM-yyyy hh:mm:ss')\r\n                                                    }\r\n                                                </td>\r\n                                            ),\r\n                                        'action':\r\n                                            (item, index) => (\r\n\r\n                                                <td className=\"py-1\">\r\n                                                    {(item.application_form_status == \"Pending\") ?\r\n                                                        <div>\r\n                                                            <button type=\"button\" className=\"table-action-button mr-2\" data-toggle=\"tooltip\" title=\"Duyệt\">\r\n                                                                <CIcon name=\"cil-check\" onClick={() => approveApplicationFormOnclick(item.application_id)}>\r\n                                                                </CIcon>\r\n                                                            </button>\r\n                                                            <button type=\"button\" className=\"table-action-button mr-2\" data-toggle=\"tooltip\" title=\"Không duyệt\">\r\n                                                                <CIcon name=\"cil-x\" onClick={() => rejectApplicationFormOnclick(item.application_id)}>\r\n                                                                </CIcon>\r\n                                                            </button>\r\n                                                        </div>\r\n                                                        :\r\n                                                        null}\r\n                                                </td>\r\n                                            ),\r\n                                    }\r\n                                }\r\n                            />\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n                {/*POPUP APPROVE APPLICATION FORM*/}\r\n                {approveApplicationFormModalShow && selectedApplicationFormId != null ?\r\n                    <ApproveApplicationFormModal\r\n                        selectedApplicationFormId={selectedApplicationFormId}\r\n                        show={approveApplicationFormModalShow}\r\n                        handleClose={() => hideApproveApplicationFormModal}\r\n                        refreshDataFlag={refreshDataFlag}\r\n                        setRefreshDataFlag={setRefreshDataFlag} />\r\n                    : null}\r\n                {/*POPUP REJECT APPLICATION FORM*/}\r\n                {rejectApplicationFormModalShow && selectedApplicationFormId != null ?\r\n                    <RejectApplicationFormModal\r\n                        selectedApplicationFormId={selectedApplicationFormId}\r\n                        show={rejectApplicationFormModalShow}\r\n                        handleClose={() => hideRejectApplicationFormModal}\r\n                        refreshDataFlag={refreshDataFlag}\r\n                        setRefreshDataFlag={setRefreshDataFlag} />\r\n                    : null}\r\n            </CRow>\r\n        )\r\n    } else {\r\n        <CAlert color=\"danger\">Bạn không có quyền sử dụng chức năng này!</CAlert>\r\n    }\r\n}\r\n\r\nexport default ViewCandidateCertification","// import axios from 'axios';\r\n\r\n// let APIKit = axios.create({\r\n//     baseURL: process.env.BACKEND_URL,\r\n//     timeout: 10000\r\n// })\r\n\r\n// export default APIKit;\r\n\r\nimport axios from 'axios';\r\n\r\n// Create axios client, pre-configured with baseURL\r\nlet APIKit = axios.create({\r\n  baseURL: 'https://got-english-backend-production-swiyh5bc4q-de.a.run.app',\r\n  timeout: 10000,\r\n});\r\n\r\n// Set JSON Web Token in Client to be included in all calls\r\n// export const setClientToken = token => {\r\n//   APIKit.interceptors.request.use(function (config) {\r\n//     config.headers.Authorization = `Bearer ${token}`;\r\n//     return config;\r\n//   });\r\n// };\r\n\r\nexport default APIKit;"],"sourceRoot":""}