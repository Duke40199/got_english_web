{"version":3,"sources":["api/APIKit.js","api/application-form.js","views/pages/view-application-form/ApproveAppicationFormModal.js","views/pages/view-application-form/RejectApplicationFormModal.js","views/pages/view-application-form/ViewApplicationForm.js"],"names":["APIKit","axios","create","baseURL","timeout","GetApplicationFormListAPI","a","token","JSON","parse","localStorage","getItem","applicationFormList","onSuccess","data","onFailure","error","console","log","apiConfig","headers","get","then","catch","ApproveApplicationFormByIdAPI","applicationFormId","approveApplicationFormResult","response","success","includes","RejectApplicationFormByIdAPI","rejectApplicationFormResult","ApproveApplicationFormModal","selectedApplicationFormId","show","handleClose","useState","approveMessage","setApproveMessage","onSubmitApproveForm","e","preventDefault","approveResult","color","onClose","closeOnBackdrop","onSubmit","method","encType","className","closeButton","type","onClick","RejectApplicationFormModal","rejectMessage","setRejectMessage","onSubmitRejectForm","rejectResult","fields","key","label","ViewCandidateCertification","currentIndex","setCurrentIndex","approveApplicationFormModalShow","setApproveApplicationFormModalShow","rejectApplicationFormModalShow","setRejectApplicationFormModalShow","setSelectedApplicationFormId","setApplicationFormList","promiseInProgress","usePromiseTracker","defineApplicationFormType","applicationType","definedApplicationFormType","beforeDefineApplicationType","split","map","item","index","push","useEffect","trackPromise","editedApplicationFormList","editedApplicationForm","expert_info","account","fullname","email","phone_number","id","photo_url","created_at","hideApproveApplicationFormModal","hideRejectApplicationFormModal","items","striped","bordered","size","itemsPerPage","pagination","loading","noItemsView","noResults","noItems","tableFilter","placeholder","scopedSlots","application_type","src","application_form_certificate","width","height","openLightbox","image","showTitle","application_form_send_datetime","format","parseISO","data-toggle","title","name","application_id"],"mappings":"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","file":"static/js/42.1b0d2b76.chunk.js","sourcesContent":["// import axios from 'axios';\r\n\r\n// let APIKit = axios.create({\r\n//     baseURL: process.env.BACKEND_URL,\r\n//     timeout: 10000\r\n// })\r\n\r\n// export default APIKit;\r\n\r\nimport axios from 'axios';\r\n\r\n// Create axios client, pre-configured with baseURL\r\nlet APIKit = axios.create({\r\n  baseURL: 'https://got-english-backend-production-swiyh5bc4q-de.a.run.app',\r\n  timeout: 10000,\r\n});\r\n\r\n// Set JSON Web Token in Client to be included in all calls\r\n// export const setClientToken = token => {\r\n//   APIKit.interceptors.request.use(function (config) {\r\n//     config.headers.Authorization = `Bearer ${token}`;\r\n//     return config;\r\n//   });\r\n// };\r\n\r\nexport default APIKit;","import APIKit from './APIKit'\r\n\r\nexport const GetApplicationFormListAPI = async () => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let applicationFormList = null;\r\n\r\n    const onSuccess = data => {\r\n        applicationFormList = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: {\r\n            \"Authorization\": `Bearer ${token}`\r\n        }\r\n    }\r\n\r\n    await APIKit.get('/application-forms', apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return applicationFormList;\r\n}\r\n\r\nexport const ApproveApplicationFormByIdAPI = async (applicationFormId) => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let approveApplicationFormResult = null;\r\n\r\n    const onSuccess = response => {\r\n        approveApplicationFormResult = response.data.success;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n        if ((error.response.data).includes(\"Application form is already being either approved or rejected.\")) {\r\n            approveApplicationFormResult = \"Đơn xin này đã được duyệt hoặc đã bị từ chối!\"\r\n        } else {\r\n            approveApplicationFormResult = \"Duyệt đơn xin thất bại!\"\r\n        }\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: { \"Authorization\": `Bearer ${token}` }\r\n    }\r\n\r\n    await APIKit.get('/application-forms/' + applicationFormId + '/approve', apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return approveApplicationFormResult;\r\n}\r\n\r\nexport const RejectApplicationFormByIdAPI = async (applicationFormId) => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let rejectApplicationFormResult = null;\r\n\r\n    const onSuccess = response => {\r\n        rejectApplicationFormResult = response.data.success;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n        if ((error.response.data).includes(\"Application form is already being either approved or rejected.\")) {\r\n            rejectApplicationFormResult = \"Đơn xin này đã được duyệt hoặc đã bị từ chối!\"\r\n        } else {\r\n            rejectApplicationFormResult = \"Duyệt đơn xin thất bại!\"\r\n        }\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: { \"Authorization\": `Bearer ${token}` }\r\n    }\r\n\r\n    await APIKit.get('/application-forms/' + applicationFormId + '/reject', apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return rejectApplicationFormResult;\r\n}","import React, { useState } from 'react'\r\n\r\nimport {\r\n    CButton,\r\n    CModal,\r\n    CModalHeader,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalTitle,\r\n    CAlert,\r\n    CForm\r\n} from '@coreui/react'\r\n\r\nimport { ApproveApplicationFormByIdAPI } from '../../../api/application-form'\r\n\r\nconst ApproveApplicationFormModal = ({ selectedApplicationFormId, show, handleClose }) => {\r\n    const [approveMessage, setApproveMessage] = useState(null);\r\n\r\n    const onSubmitApproveForm = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const approveResult = await ApproveApplicationFormByIdAPI(selectedApplicationFormId);\r\n        if (approveResult === true) {\r\n            setApproveMessage(<CAlert color=\"success\">Duyệt đơn xin thành công!</CAlert>);\r\n        } else {\r\n            setApproveMessage(<CAlert color=\"danger\">{approveResult}</CAlert>);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CModal\r\n            show={show}\r\n            onClose={handleClose()}\r\n            closeOnBackdrop={false}\r\n            color=\"success\"\r\n        >\r\n            <CForm onSubmit={onSubmitApproveForm} method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>Duyệt đơn xin ( id: {selectedApplicationFormId} )</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {approveMessage ? approveMessage : \"Bạn chắc chắn muốn duyệt đơn xin này chứ?\"}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"success\" type=\"submit\">\r\n                        Duyệt\r\n                </CButton>\r\n                    <CButton color=\"secondary\" onClick={handleClose()}>\r\n                        Đóng\r\n                </CButton>\r\n                </CModalFooter>\r\n            </CForm>\r\n        </CModal>\r\n    )\r\n}\r\n\r\nexport default ApproveApplicationFormModal","import React, { useState } from 'react'\r\n\r\nimport {\r\n    CButton,\r\n    CModal,\r\n    CModalHeader,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalTitle,\r\n    CAlert,\r\n    CForm\r\n} from '@coreui/react'\r\n\r\nimport { RejectApplicationFormByIdAPI } from '../../../api/application-form'\r\n\r\nconst RejectApplicationFormModal = ({ selectedApplicationFormId, show, handleClose }) => {\r\n    const [rejectMessage, setRejectMessage] = useState(null);\r\n\r\n    const onSubmitRejectForm = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const rejectResult = await RejectApplicationFormByIdAPI(selectedApplicationFormId);\r\n        if (rejectResult === true) {\r\n            setRejectMessage(<CAlert color=\"success\">Từ chối đơn xin thành công!</CAlert>);\r\n        } else {\r\n            setRejectMessage(<CAlert color=\"danger\">{rejectResult}</CAlert>);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CModal\r\n            show={show}\r\n            onClose={handleClose()}\r\n            closeOnBackdrop={false}\r\n            color=\"danger\"\r\n        >\r\n            <CForm onSubmit={onSubmitRejectForm} method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>Từ chối đơn xin ( id: {selectedApplicationFormId} )</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {rejectMessage ? rejectMessage : \"Bạn chắc chắn muốn từ chối đơn xin này chứ?\"}\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"danger\" type=\"submit\">\r\n                        Từ chối\r\n                </CButton>\r\n                    <CButton color=\"secondary\" onClick={handleClose()}>\r\n                        Đóng\r\n                </CButton>\r\n                </CModalFooter>\r\n            </CForm>\r\n        </CModal>\r\n    );\r\n}\r\n\r\nexport default RejectApplicationFormModal","import React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CDataTable,\r\n    CRow,\r\n    CCardHeader\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport ApproveApplicationFormModal from '../view-application-form/ApproveAppicationFormModal';\r\nimport RejectApplicationFormModal from '../view-application-form/RejectApplicationFormModal';\r\n\r\nimport Lightbox from \"react-awesome-lightbox\";\r\nimport \"react-awesome-lightbox/build/style.css\";\r\nimport { trackPromise, usePromiseTracker } from 'react-promise-tracker';\r\n\r\nimport { format, parseISO } from 'date-fns';\r\n\r\nimport { GetApplicationFormListAPI } from '../../../api/application-form';\r\n\r\nconst fields = [\r\n    { key: 'expert_fullname', label: 'Họ và Tên' },\r\n    { key: 'expert_email', label: 'Email' },\r\n    { key: 'expert_phone', label: 'Số điện thoại' },\r\n    { key: 'application_type', label: 'Loại đơn' },\r\n    { key: 'application_form_certificate', label: 'Chứng chỉ' },\r\n    { key: 'application_form_send_datetime', label: 'Thời gian nộp đơn' },\r\n    { key: 'action', label: '' }]\r\n\r\nconst ViewCandidateCertification = () => {\r\n    const [currentIndex, setCurrentIndex] = useState(-1);\r\n    const [approveApplicationFormModalShow, setApproveApplicationFormModalShow] = useState(false);\r\n    const [rejectApplicationFormModalShow, setRejectApplicationFormModalShow] = useState(false);\r\n    const [selectedApplicationFormId, setSelectedApplicationFormId] = useState(null);\r\n    const [applicationFormList, setApplicationFormList] = useState(null);\r\n\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    const defineApplicationFormType = (applicationType) => {\r\n        let definedApplicationFormType = [];\r\n        let beforeDefineApplicationType = applicationType.split(\",\");\r\n        if (beforeDefineApplicationType != null && beforeDefineApplicationType != \"\") {\r\n            beforeDefineApplicationType.map((item, index) => {\r\n                if (item === \"can_chat\") {\r\n                    definedApplicationFormType.push(\"Xin nhận tham gia Phiên Nhắn Tin\\n\");\r\n                }\r\n                if (item === \"can_join_live_call_session\") {\r\n                    definedApplicationFormType.push(\"Xin nhận tham gia Phiên Nhắn Tin\\n\");\r\n                }\r\n                if (item === \"can_join_translation_session\") {\r\n                    definedApplicationFormType.push(\"Xin nhận tham gia Phòng Phiên Dịch\\n\");\r\n                }\r\n            })\r\n        }\r\n        return definedApplicationFormType;\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const applicationFormList = await trackPromise(GetApplicationFormListAPI());\r\n        const editedApplicationFormList = [];\r\n        let editedApplicationForm = {};\r\n        if (applicationFormList != null) {\r\n            applicationFormList.map((item, index) => {\r\n                editedApplicationForm = {\r\n                    \"expert_fullname\": item.expert_info.account.fullname,\r\n                    \"expert_email\": item.expert_info.account.email,\r\n                    \"expert_phone\": item.expert_info.account.phone_number,\r\n                    \"application_id\": item.id,\r\n                    \"application_type\": item.type,\r\n                    \"application_form_certificate\": item.photo_url,\r\n                    \"application_form_send_datetime\": item.created_at\r\n                }\r\n                editedApplicationFormList.push(editedApplicationForm);\r\n            });\r\n        }\r\n        setApplicationFormList(editedApplicationFormList);\r\n    }, []);\r\n\r\n    const approveApplicationFormOnclick = (applicationFormId) => {\r\n        //open the approve application form modal\r\n        setApproveApplicationFormModalShow(true);\r\n        //set params\r\n        setSelectedApplicationFormId(applicationFormId);\r\n    }\r\n\r\n    const rejectApplicationFormOnclick = (applicationFormId) => {\r\n        //open the reject application form modal\r\n        setRejectApplicationFormModalShow(true);\r\n        //set params\r\n        setSelectedApplicationFormId(applicationFormId);\r\n    }\r\n\r\n    const hideApproveApplicationFormModal = () => {\r\n        setApproveApplicationFormModalShow(false);\r\n    }\r\n\r\n    const hideRejectApplicationFormModal = () => {\r\n        setRejectApplicationFormModalShow(false);\r\n    }\r\n\r\n    const openLightbox = (index) => {\r\n        setCurrentIndex(index);\r\n    }\r\n    return (\r\n        <CRow>\r\n            <CCol>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                        <h3 className=\"m-0\">Danh sách Hồ Sơ Ứng Viên:</h3>\r\n                    </CCardHeader>\r\n                    <CCardBody className=\"pt-0 pb-0\">\r\n                        <CDataTable\r\n                            items={applicationFormList}\r\n                            fields={fields}\r\n                            striped\r\n                            bordered\r\n                            size=\"sm\"\r\n                            itemsPerPage={5}\r\n                            pagination\r\n                            loading={promiseInProgress}\r\n                            noItemsView={{ noResults: 'Không có kết quả tìm kiếm trùng khớp', noItems: 'Không có dữ liệu' }}\r\n                            tableFilter={\r\n                                {\r\n                                    label: \"Tìm kiếm:\",\r\n                                    placeholder: \"nhập thông tin Ứng Viên cần tìm...\",\r\n                                }\r\n                            }\r\n                            scopedSlots={\r\n                                {\r\n                                    'application_type':\r\n                                        (item, index) => (\r\n                                            <td className=\"text-pre-line\">\r\n                                                {(item.application_type == null || item.application_type == \"\") ?\r\n                                                    \"\" :\r\n                                                    defineApplicationFormType(item.application_type)\r\n                                                }\r\n                                            </td>\r\n                                        ),\r\n                                    'application_form_certificate':\r\n                                        (item, index) => (\r\n                                            <td>\r\n                                                <img src={item.application_form_certificate} className=\"img-thumbnail lightbox-thumbnail-img\" width=\"120px\" height=\"90px\" onClick={e => openLightbox(index)} />\r\n                                                {currentIndex == index\r\n                                                    ?\r\n                                                    <Lightbox image={item.application_form_certificate}\r\n                                                        showTitle={false}\r\n                                                        onClose={e => setCurrentIndex(-1)} />\r\n                                                    : null}\r\n                                            </td>\r\n                                        ),\r\n                                    'application_form_send_datetime':\r\n                                        (item, index) => (\r\n                                            <td>\r\n                                                {(item.application_form_send_datetime == null || item.application_form_send_datetime == \"\") ?\r\n                                                    \"\"\r\n                                                    :\r\n                                                    format(parseISO(item.application_form_send_datetime), 'dd-MM-yyyy hh:mm:ss')\r\n                                                }\r\n                                            </td>\r\n                                        ),\r\n                                    'action':\r\n                                        (item, index) => (\r\n                                            <td className=\"py-1\">\r\n\r\n                                                <button type=\"button\" className=\"table-action-button mr-2\" data-toggle=\"tooltip\" title=\"Duyệt\">\r\n                                                    <CIcon name=\"cil-check\" onClick={() => approveApplicationFormOnclick(item.application_id)}>\r\n                                                    </CIcon>\r\n                                                </button>\r\n                                                <button type=\"button\" className=\"table-action-button mr-2\" data-toggle=\"tooltip\" title=\"Không duyệt\">\r\n                                                    <CIcon name=\"cil-x\" onClick={() => rejectApplicationFormOnclick(item.application_id)}>\r\n                                                    </CIcon>\r\n                                                </button>\r\n                                            </td>\r\n                                        ),\r\n                                }\r\n                            }\r\n                        />\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CCol>\r\n            {/*POPUP APPROVE APPLICATION FORM*/}\r\n            {approveApplicationFormModalShow && selectedApplicationFormId != null ?\r\n                <ApproveApplicationFormModal\r\n                    selectedApplicationFormId={selectedApplicationFormId}\r\n                    show={approveApplicationFormModalShow}\r\n                    handleClose={() => hideApproveApplicationFormModal} />\r\n                : null}\r\n            {/*POPUP REJECT APPLICATION FORM*/}\r\n            {rejectApplicationFormModalShow && selectedApplicationFormId != null ?\r\n                <RejectApplicationFormModal\r\n                    selectedApplicationFormId={selectedApplicationFormId}\r\n                    show={rejectApplicationFormModalShow}\r\n                    handleClose={() => hideRejectApplicationFormModal} />\r\n                : null}\r\n        </CRow>\r\n    )\r\n}\r\n\r\nexport default ViewCandidateCertification"],"sourceRoot":""}