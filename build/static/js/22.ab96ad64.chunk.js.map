{"version":3,"sources":["api/APIKit.js","api/summary.js","views/charts/UserChart.js","views/charts/ServiceChart.js","views/dashboard/Dashboard.js"],"names":["APIKit","axios","create","baseURL","timeout","GetDailySummaryAPI","a","token","JSON","parse","localStorage","getItem","dailySummary","onSuccess","data","onFailure","error","console","log","apiConfig","headers","get","then","catch","GetMonthlyAccountSummaryByYearMonthAPI","year","month","accountMonthlySummary","GetMonthlyServiceSummaryByYearMonthAPI","serviceMonthlySummary","brandPrimary","getStyle","brandDanger","UserChart","attributes","dataCount","countArray","Object","keys","new_expert_monthly_count","length","i","push","userDatasets","elements","newExpertMonthlyData","newLearnerMonthlyData","key","new_learner_monthly_count","label","backgroundColor","borderColor","pointHoverBackgroundColor","borderWidth","defaultOptions","maintainAspectRatio","scales","yAxes","ticks","stepSize","min","datasets","options","labels","brandSuccess","brandWarning","brandDark","ServiceChart","new_messaging_session_monthly_count","newMessagingSessionMonthlyData","newLiveCallSessionMonthlyData","newTranslationSessionMonthlyData","new_live_call_session_monthly_count","new_translation_session_monthly_count","WidgetsDropdown","lazy","Dashboard","useState","Date","userSummaryMonthYear","setUserSummaryMonthYear","userMonthlySummary","setUserMonthlySummary","sumMonthlyExpert","setSumMonthlyExpert","sumMonthlyLearner","setSumMonthlyLearner","serviceSummaryMonthYear","setServiceSummaryMonthYear","setServiceMonthlySummary","sumMonthlyMessagingSession","setSumMonthlyMessagingSession","sumMonthlyLiveCallSession","setSumMonthlyLiveCallSession","sumMonthlyTranslationSession","setSumMonthlyTranslationSession","useEffect","format","userMonthYearSummary","expertDataCount","learnerDataCount","reduce","b","serviceMonthYearSummary","messagingSessionMonthlyData","liveCallSessionMonthlyData","translationSessionMonthlyData","messagingSessionDataCount","liveCallSessionDataCount","translationSessionDataCount","fetchData","UserSummaryMonthYearInput","value","onClick","className","ServiceSummaryMonthYearInput","userSummaryMonthYearButtonOnchange","monthYear","serviceSummaryMonthYearButtonOnchange","registerLocale","vi","sm","id","selected","onChange","date","locale","showMonthYearPicker","dateFormat","maxDate","customInput","customInputRef","instance","DatePicker","style","height","marginTop","md"],"mappings":"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","file":"static/js/22.ab96ad64.chunk.js","sourcesContent":["// import axios from 'axios';\r\n\r\n// let APIKit = axios.create({\r\n//     baseURL: process.env.BACKEND_URL,\r\n//     timeout: 10000\r\n// })\r\n\r\n// export default APIKit;\r\n\r\nimport axios from 'axios';\r\n\r\n// Create axios client, pre-configured with baseURL\r\nlet APIKit = axios.create({\r\n  baseURL: 'https://got-english-backend-production-swiyh5bc4q-de.a.run.app',\r\n  timeout: 10000,\r\n});\r\n\r\n// Set JSON Web Token in Client to be included in all calls\r\n// export const setClientToken = token => {\r\n//   APIKit.interceptors.request.use(function (config) {\r\n//     config.headers.Authorization = `Bearer ${token}`;\r\n//     return config;\r\n//   });\r\n// };\r\n\r\nexport default APIKit;","import APIKit from './APIKit';\r\n\r\nexport const GetDailySummaryAPI = async () => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let dailySummary = null;\r\n\r\n    const onSuccess = data => {\r\n        dailySummary = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: { \"Authorization\": `Bearer ${token}` }\r\n    }\r\n\r\n    await APIKit.get('/administrator/daily-summary', apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return dailySummary;\r\n}\r\n\r\nexport const GetMonthlyAccountSummaryByYearMonthAPI = async (year, month) => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let accountMonthlySummary = null;\r\n\r\n    const onSuccess = data => {\r\n        accountMonthlySummary = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: { \"Authorization\": `Bearer ${token}` }\r\n    }\r\n\r\n    await APIKit.get('/administrator/account-monthly-summary?year=' + year + \"&month=\" + month, apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return accountMonthlySummary;\r\n}\r\n\r\nexport const GetMonthlyServiceSummaryByYearMonthAPI = async (year, month) => {\r\n    const token = (JSON.parse(localStorage.getItem(\"user\"))).token;\r\n    let serviceMonthlySummary = null;\r\n\r\n    const onSuccess = data => {\r\n        serviceMonthlySummary = data.data.data;\r\n    }\r\n\r\n    const onFailure = error => {\r\n        console.log(error);\r\n    }\r\n\r\n    const apiConfig = {\r\n        headers: { \"Authorization\": `Bearer ${token}` }\r\n    }\r\n\r\n    await APIKit.get('/administrator/service-monthly-summary?year=' + year + \"&month=\" + month, apiConfig)\r\n        .then(onSuccess)\r\n        .catch(onFailure);\r\n\r\n    return serviceMonthlySummary;\r\n}","import React from 'react'\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\nimport { getStyle } from '@coreui/utils'\r\n\r\nconst brandPrimary = getStyle('primary') || '#321fdb'\r\nconst brandDanger = getStyle('danger') || '#e55353'\r\n\r\nconst UserChart = attributes => {\r\n    let dataCount = 0;\r\n    let countArray = [];\r\n\r\n    if (attributes.data != null) {\r\n        dataCount = Object.keys(attributes.data.new_expert_monthly_count).length;\r\n        for (var i = 1; i <= dataCount; i++) {\r\n            countArray.push(i);\r\n        }\r\n    }\r\n\r\n    const userDatasets = (() => {\r\n        let elements = dataCount - 1;\r\n        const newExpertMonthlyData = [];\r\n        const newLearnerMonthlyData = [];\r\n        if (attributes.data != null) {\r\n            for (let i = elements; i >= 0; i--) {\r\n                let key = i + \"_day_ago\";\r\n                newExpertMonthlyData.push(attributes.data.new_expert_monthly_count[key]);\r\n                newLearnerMonthlyData.push(attributes.data.new_learner_monthly_count[key]);\r\n            }\r\n        }\r\n\r\n\r\n        return [\r\n            {\r\n                label: 'Chuyên Gia',\r\n                backgroundColor: 'transparent',\r\n                borderColor: brandPrimary,\r\n                pointHoverBackgroundColor: brandPrimary,\r\n                borderWidth: 2,\r\n                data: newExpertMonthlyData\r\n            },\r\n            {\r\n                label: 'Học Viên',\r\n                backgroundColor: 'transparent',\r\n                borderColor: brandDanger,\r\n                pointHoverBackgroundColor: brandDanger,\r\n                borderWidth: 2,\r\n                data: newLearnerMonthlyData\r\n            },\r\n        ]\r\n    })()\r\n\r\n    const defaultOptions = (() => {\r\n        return {\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        stepSize: 1,\r\n                        min: 0\r\n                    },\r\n\r\n                }]\r\n            },\r\n        }\r\n    }\r\n    )()\r\n\r\n    // render\r\n    return (\r\n        <CChartLine\r\n            {...attributes}\r\n            datasets={userDatasets}\r\n            options={defaultOptions}\r\n            labels={countArray}\r\n        />\r\n    )\r\n}\r\n\r\nexport default UserChart","import React from 'react'\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\nimport { getStyle } from '@coreui/utils'\r\n\r\nconst brandSuccess = getStyle('success') || '#2eb85c'\r\nconst brandWarning = getStyle('warning') || '#f9b115'\r\nconst brandDark = getStyle('dark') || '#636f83'\r\n\r\nconst ServiceChart = attributes => {\r\n    let dataCount = 0;\r\n    let countArray = [];\r\n\r\n    if (attributes.data != null) {\r\n        dataCount = Object.keys(attributes.data.new_messaging_session_monthly_count).length;\r\n        for (var i = 1; i <= dataCount; i++) {\r\n            countArray.push(i);\r\n        }\r\n    }\r\n\r\n    const userDatasets = (() => {\r\n        let elements = dataCount - 1;\r\n        const newMessagingSessionMonthlyData = [];\r\n        const newLiveCallSessionMonthlyData = [];\r\n        const newTranslationSessionMonthlyData = [];\r\n        if (attributes.data != null) {\r\n            for (let i = elements; i >= 0; i--) {\r\n                let key = i + \"_day_ago\";\r\n                newMessagingSessionMonthlyData.push(attributes.data.new_messaging_session_monthly_count[key]);\r\n                newLiveCallSessionMonthlyData.push(attributes.data.new_live_call_session_monthly_count[key]);\r\n                newTranslationSessionMonthlyData.push(attributes.data.new_translation_session_monthly_count[key]);\r\n            }\r\n        }\r\n\r\n\r\n        return [\r\n            {\r\n                label: 'Phiên Nhắn Tin',\r\n                backgroundColor: 'transparent',\r\n                borderColor: brandSuccess,\r\n                pointHoverBackgroundColor: brandSuccess,\r\n                borderWidth: 2,\r\n                data: newMessagingSessionMonthlyData\r\n            },\r\n            {\r\n                label: 'Phiên Gọi Trực Tuyến',\r\n                backgroundColor: 'transparent',\r\n                borderColor: brandWarning,\r\n                pointHoverBackgroundColor: brandWarning,\r\n                borderWidth: 2,\r\n                data: newLiveCallSessionMonthlyData\r\n            },\r\n            {\r\n                label: 'Phiên Phiên Dịch',\r\n                backgroundColor: 'transparent',\r\n                borderColor: brandDark,\r\n                pointHoverBackgroundColor: brandDark,\r\n                borderWidth: 2,\r\n                data: newTranslationSessionMonthlyData\r\n            },\r\n        ]\r\n    })()\r\n\r\n    const defaultOptions = (() => {\r\n        return {\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        stepSize: 1,\r\n                        min: 0\r\n                    },\r\n\r\n                }]\r\n            },\r\n        }\r\n    }\r\n    )()\r\n\r\n    // render\r\n    return (\r\n        <CChartLine\r\n            {...attributes}\r\n            datasets={userDatasets}\r\n            options={defaultOptions}\r\n            labels={countArray}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ServiceChart","import React, { lazy, useState, useEffect } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCol,\r\n  CRow,\r\n  CButton\r\n} from '@coreui/react'\r\n\r\nimport { format } from 'date-fns'\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport vi from \"date-fns/locale/vi\";\r\n\r\nimport { GetMonthlyAccountSummaryByYearMonthAPI, GetMonthlyServiceSummaryByYearMonthAPI } from \"../../api/summary\";\r\n\r\nimport UserChart from '../charts/UserChart';\r\nimport ServiceChart from '../charts/ServiceChart';\r\n\r\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\r\n\r\nconst Dashboard = () => {\r\n  const [userSummaryMonthYear, setUserSummaryMonthYear] = useState(new Date());\r\n  const [userMonthlySummary, setUserMonthlySummary] = useState(null);\r\n  const [sumMonthlyExpert, setSumMonthlyExpert] = useState(0);\r\n  const [sumMonthlyLearner, setSumMonthlyLearner] = useState(0);\r\n  const [serviceSummaryMonthYear, setServiceSummaryMonthYear] = useState(new Date());\r\n  const [serviceMonthlySummary, setServiceMonthlySummary] = useState(null);\r\n  const [sumMonthlyMessagingSession, setSumMonthlyMessagingSession] = useState(0);\r\n  const [sumMonthlyLiveCallSession, setSumMonthlyLiveCallSession] = useState(0);\r\n  const [sumMonthlyTranslationSession, setSumMonthlyTranslationSession] = useState(0);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const month = format(new Date(), \"MM\");\r\n      const year = format(new Date(), \"yyyy\");\r\n      //-----------USER SUMMARY-----------\r\n      const userMonthYearSummary = await GetMonthlyAccountSummaryByYearMonthAPI(year, month);\r\n      let newExpertMonthlyData = [];\r\n      let newLearnerMonthlyData = [];\r\n      if (userMonthYearSummary != null) {\r\n        const expertDataCount = Object.keys(userMonthYearSummary.new_expert_monthly_count).length;\r\n        const learnerDataCount = Object.keys(userMonthYearSummary.new_learner_monthly_count).length;\r\n        for (let i = expertDataCount - 1; i >= 0; i--) {\r\n          let key = i + \"_day_ago\";\r\n          newExpertMonthlyData.push(userMonthYearSummary.new_expert_monthly_count[key]);\r\n        }\r\n        for (let i = learnerDataCount - 1; i >= 0; i--) {\r\n          let key = i + \"_day_ago\";\r\n          newLearnerMonthlyData.push(userMonthYearSummary.new_learner_monthly_count[key]);\r\n        }\r\n        setSumMonthlyExpert(newExpertMonthlyData.reduce((a, b) => a + b, 0));\r\n        setSumMonthlyLearner(newLearnerMonthlyData.reduce((a, b) => a + b, 0));\r\n        setUserMonthlySummary(userMonthYearSummary);\r\n        //-----------SERVICE SUMMARY-----------\r\n        const serviceMonthYearSummary = await GetMonthlyServiceSummaryByYearMonthAPI(year, month);\r\n        let messagingSessionMonthlyData = [];\r\n        let liveCallSessionMonthlyData = [];\r\n        let translationSessionMonthlyData = [];\r\n        if (serviceMonthYearSummary != null) {\r\n          const messagingSessionDataCount = Object.keys(serviceMonthYearSummary.new_messaging_session_monthly_count).length;\r\n          const liveCallSessionDataCount = Object.keys(serviceMonthYearSummary.new_live_call_session_monthly_count).length;\r\n          const translationSessionDataCount = Object.keys(serviceMonthYearSummary.new_translation_session_monthly_count).length;\r\n          for (let i = messagingSessionDataCount - 1; i >= 0; i--) {\r\n            let key = i + \"_day_ago\";\r\n            messagingSessionMonthlyData.push(serviceMonthYearSummary.new_messaging_session_monthly_count[key]);\r\n          }\r\n          for (let i = liveCallSessionDataCount - 1; i >= 0; i--) {\r\n            let key = i + \"_day_ago\";\r\n            liveCallSessionMonthlyData.push(serviceMonthYearSummary.new_live_call_session_monthly_count[key]);\r\n          }\r\n          for (let i = translationSessionDataCount - 1; i >= 0; i--) {\r\n            let key = i + \"_day_ago\";\r\n            translationSessionMonthlyData.push(serviceMonthYearSummary.new_translation_session_monthly_count[key]);\r\n          }\r\n          setSumMonthlyMessagingSession(messagingSessionMonthlyData.reduce((a, b) => a + b, 0));\r\n          setSumMonthlyLiveCallSession(liveCallSessionMonthlyData.reduce((a, b) => a + b, 0));\r\n          setSumMonthlyTranslationSession(translationSessionMonthlyData.reduce((a, b) => a + b, 0));\r\n          setServiceMonthlySummary(serviceMonthYearSummary);\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const UserSummaryMonthYearInput = ({ value, onClick }) => (\r\n    <CButton className=\"dashboard-month-year-input\" onClick={onClick}>\r\n      {value}\r\n    </CButton>\r\n  );\r\n\r\n  const ServiceSummaryMonthYearInput = ({ value, onClick }) => (\r\n    <CButton className=\"dashboard-month-year-input\" onClick={onClick}>\r\n      {value}\r\n    </CButton>\r\n  );\r\n\r\n  const userSummaryMonthYearButtonOnchange = async (monthYear) => {\r\n    setUserSummaryMonthYear(monthYear);\r\n    const month = format(monthYear, \"MM\");\r\n    const year = format(monthYear, \"yyyy\");\r\n    const userMonthYearSummary = await GetMonthlyAccountSummaryByYearMonthAPI(year, month);\r\n    let newExpertMonthlyData = [];\r\n    let newLearnerMonthlyData = [];\r\n    if (userMonthYearSummary != null) {\r\n      const expertDataCount = Object.keys(userMonthYearSummary.new_expert_monthly_count).length;\r\n      const learnerDataCount = Object.keys(userMonthYearSummary.new_learner_monthly_count).length;\r\n      for (let i = expertDataCount - 1; i >= 0; i--) {\r\n        let key = i + \"_day_ago\";\r\n        newExpertMonthlyData.push(userMonthYearSummary.new_expert_monthly_count[key]);\r\n      }\r\n      for (let i = learnerDataCount - 1; i >= 0; i--) {\r\n        let key = i + \"_day_ago\";\r\n        newLearnerMonthlyData.push(userMonthYearSummary.new_learner_monthly_count[key]);\r\n      }\r\n      setSumMonthlyExpert(newExpertMonthlyData.reduce((a, b) => a + b, 0));\r\n      setSumMonthlyLearner(newLearnerMonthlyData.reduce((a, b) => a + b, 0));\r\n      setUserMonthlySummary(userMonthYearSummary);\r\n    }\r\n  }\r\n\r\n  const serviceSummaryMonthYearButtonOnchange = async (monthYear) => {\r\n    setServiceSummaryMonthYear(monthYear);\r\n    const month = format(monthYear, \"MM\");\r\n    const year = format(monthYear, \"yyyy\");\r\n    const serviceMonthYearSummary = await GetMonthlyServiceSummaryByYearMonthAPI(year, month);\r\n    let messagingSessionMonthlyData = [];\r\n    let liveCallSessionMonthlyData = [];\r\n    let translationSessionMonthlyData = [];\r\n    if (serviceMonthYearSummary != null) {\r\n      const messagingSessionDataCount = Object.keys(serviceMonthYearSummary.new_messaging_session_monthly_count).length;\r\n      const liveCallSessionDataCount = Object.keys(serviceMonthYearSummary.new_live_call_session_monthly_count).length;\r\n      const translationSessionDataCount = Object.keys(serviceMonthYearSummary.new_translation_session_monthly_count).length;\r\n      for (let i = messagingSessionDataCount - 1; i >= 0; i--) {\r\n        let key = i + \"_day_ago\";\r\n        messagingSessionMonthlyData.push(serviceMonthYearSummary.new_messaging_session_monthly_count[key]);\r\n      }\r\n      for (let i = liveCallSessionDataCount - 1; i >= 0; i--) {\r\n        let key = i + \"_day_ago\";\r\n        liveCallSessionMonthlyData.push(serviceMonthYearSummary.new_live_call_session_monthly_count[key]);\r\n      }\r\n      for (let i = translationSessionDataCount - 1; i >= 0; i--) {\r\n        let key = i + \"_day_ago\";\r\n        translationSessionMonthlyData.push(serviceMonthYearSummary.new_translation_session_monthly_count[key]);\r\n      }\r\n      setSumMonthlyMessagingSession(messagingSessionMonthlyData.reduce((a, b) => a + b, 0));\r\n      setSumMonthlyLiveCallSession(liveCallSessionMonthlyData.reduce((a, b) => a + b, 0));\r\n      setSumMonthlyTranslationSession(translationSessionMonthlyData.reduce((a, b) => a + b, 0));\r\n      setServiceMonthlySummary(serviceMonthYearSummary);\r\n    }\r\n  }\r\n\r\n  registerLocale(\"vi\", vi);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"mb-3\">Bảng tin ngày {format(new Date(), 'dd-MM-yyyy')}:</h3>\r\n      <WidgetsDropdown />\r\n      <CCard>\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol sm=\"5\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">Thống kê lượng Người Dùng mới theo Tháng</h4>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-none d-md-block\">\r\n              <DatePicker\r\n                selected={userSummaryMonthYear}\r\n                onChange={date => userSummaryMonthYearButtonOnchange(date)}\r\n                locale=\"vi\"\r\n                showMonthYearPicker\r\n                dateFormat=\"MM/yyyy\"\r\n                maxDate={new Date()}\r\n                value={userSummaryMonthYear}\r\n                customInput={<UserSummaryMonthYearInput />}\r\n                customInputRef={instance => DatePicker = instance}\r\n              />\r\n            </CCol>\r\n          </CRow>\r\n          {/* <MainChartExample\r\n            style={{ height: '300px', marginTop: '40px' }}\r\n            data={userMonthlySummary}\r\n          /> */}\r\n          <UserChart\r\n            style={{ height: '300px', marginTop: '40px' }}\r\n            data={userMonthlySummary}\r\n          />\r\n        </CCardBody>\r\n        <CCardFooter>\r\n          <CRow className=\"text-center\">\r\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0 d-md-down-none\">\r\n              <div className=\"text-muted\">Tổng Chuyên Gia mới trong tháng</div>\r\n              <strong>{sumMonthlyExpert}</strong>\r\n            </CCol>\r\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\r\n              <div className=\"text-muted\">Tổng Học Viên mới trong tháng</div>\r\n              <strong>{sumMonthlyLearner}</strong>\r\n            </CCol>\r\n          </CRow>\r\n        </CCardFooter>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol sm=\"5\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">Thống kê lượng Dịch Vụ tiêu hao theo Tháng</h4>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-none d-md-block\">\r\n              <DatePicker\r\n                selected={serviceSummaryMonthYear}\r\n                onChange={date => serviceSummaryMonthYearButtonOnchange(date)}\r\n                locale=\"vi\"\r\n                showMonthYearPicker\r\n                dateFormat=\"MM/yyyy\"\r\n                maxDate={new Date()}\r\n                value={serviceSummaryMonthYear}\r\n                customInput={<ServiceSummaryMonthYearInput />}\r\n                customInputRef={instance => DatePicker = instance}\r\n              />\r\n            </CCol>\r\n          </CRow>\r\n          <ServiceChart\r\n            style={{ height: '300px', marginTop: '40px' }}\r\n            data={serviceMonthlySummary}\r\n          />\r\n        </CCardBody>\r\n        <CCardFooter>\r\n          <CRow className=\"text-center\">\r\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\r\n              <div className=\"text-muted\">Phiên nhắn tin</div>\r\n              <strong>{sumMonthlyMessagingSession}</strong>\r\n            </CCol>\r\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0 d-md-down-none\">\r\n              <div className=\"text-muted\">Phiên gọi trực tuyến</div>\r\n              <strong>{sumMonthlyLiveCallSession}</strong>\r\n            </CCol>\r\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\r\n              <div className=\"text-muted\">Phòng phiên dịch</div>\r\n              <strong>{sumMonthlyTranslationSession}</strong>\r\n            </CCol>\r\n          </CRow>\r\n        </CCardFooter>\r\n      </CCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n"],"sourceRoot":""}